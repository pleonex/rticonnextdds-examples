#!/bin/python
###############################################################################
# (c) 2005-2015 Copyright, Real-Time Innovations, Inc.  All rights reserved.
# RTI grants Licensee a license to use, modify, compile, and create derivative
# works of the Software.  Licensee has the right to distribute object form only
# for use with RTI products. The Software is provided "as is", with no warranty
# of any type, including any warranty for fitness for any purpose. RTI is under
# no obligation to maintain or support the Software.  RTI shall not be liable
# for any incidental or consequential damages arising out of the use or
# inability to use the software.
###############################################################################

from jinja2 import Template  # It is not compatible with Python3 yet.
from argparse import ArgumentParser
from os import path, makedirs, pardir, environ
from subprocess import check_call, CalledProcessError
from re import match, compile
from shutil import copy
from platform import system

# Automatic IDL generation.
FOO_IDL = """/* Foo IDL generated by create_example.py script. */
struct Foo {
    long a;
};
"""

# Programming languages. C++11 is also supported but usually is only
# implemented on C++03. Pass the --language argument to select C++11.
LANGUAGES = ["c", "c++", "c++03", "c#", "java"]


def copy_file(src, dst, overwrite=False):
    dstfile = dst

    # If it's a folder we will need to join with name.
    # I am not using copy from shutil since I cannot check if I am overwritting
    if path.isdir(dst):
        filename = path.basename(src)
        dstfile = path.join(dst, filename)

    if path.exists(dstfile) and not overwrite:
        return

    copy(src, dstfile)


def copy_files(info):
    # Get IDL file from files to copy.
    regex = compile('.*\.idl')
    info["idlfile"] = [file for file in info["files"] if match(regex, file)]
    info["idlfile"] = info["idlfile"][0] if len(info["idlfile"]) > 0 else None

    # Try to get IDL name if no "--idlname" has been passed
    if info["idlname"] is None:
        # Get the name from the IDL file.
        if info["idlfile"] is not None:
            info["idlname"] = path.splitext(path.basename(info["idlfile"]))[0]
        # Set the name from example short name.
        else:
            info["idlname"] = info["name"]

    # Copy files without overwriting.
    for f in info["files"]:
        copy_file(f, info["expath"])

    # Update IDL file path to take from our example folder.
    # Used later by rtiddsgen to generate the examples files.
    info["idlfile"] = path.join(info["expath"], info["idlname"] + ".idl")

    # Create a Foo IDL if it does not exist.
    if not path.exists(info["idlfile"]):
        with open(info["idlfile"], "w") as idlfile:
            idlfile.write(FOO_IDL)

    # Create gitignore file if it does not exist.
    gitignore_path = path.join(info["expath"], pardir, ".gitignore")
    if not path.exists(gitignore_path):
        with open(gitignore_path, "w") as gitignore_file:
            gitignore_file.write("# Files generated by rtiddsgen\n")
            gitignore_file.write(info["idlname"] + ".*\n")
            gitignore_file.write("!" + info["idlname"] + ".idl\n")

            # If user has not copied a profiles XML, rtiddsgen will create it.
            profile_path = path.join(info["expath"], "USER_QOS_PROFILES.xml")
            if not path.exists(profile_path):
                gitignore_file.write("USER_QOS_PROFILES.xml")


def call_rtiddsgen(info):
    try:
        rtiddsgen_path = "rtiddsgen"
        if which(rtiddsgen_path) is None:
            # Get NDDSHOME and build path
            nddshome = environ.get("NDDSHOME")
            if nddshome is None:
                print("Cannot find 'rtiddsgen' on PATH and NDDSHOME variable" +
                      " is not defined. Aborting.")
                raise SystemExit(-1)

            rtiddsgen_path = path.join(nddshome, "bin", "rtiddsgen")

        check_call([rtiddsgen_path, "-language", info["language"],
                   "-example", info["arch"], info["idlfile"]])
    except CalledProcessError:
        print("Error calling rtiddsgen")
        raise SystemExit(-1)


# Implementation from: http://stackoverflow.com/a/377028
def which(program):
    import os

    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


def create_template(template_name, outpath, info):
    # Do not overwrite
    if path.exists(outpath):
        return

    # Get template file inside "resources" folder.
    template_path = path.join(info["repopath"], "resources", template_name)
    with open(template_path, "r") as template_file:
        template_text = template_file.read()

    # Create template
    template = Template(template_text)

    # Write to file the rendered text
    with open(outpath, "w") as readme:
        readme.write(template.render(info))


def create_templates(info):
    # Get template language for name "readme_x_style.md"
    template_lang = info["language"]
    if template_lang in ["c++", "c++03", "c++11"]:
        template_lang = "c"
    elif template_lang == "c#":
        template_lang = "cs"

    template_name = "readme_" + template_lang + "_style.md"
    template_path = path.join(info["expath"], "README.md")
    create_template(template_name, template_path, info)

    # Create template for example description in parent folder
    template_name = "readme_description.md"
    template_path = path.join(info["expath"], pardir, "README.md")
    create_template(template_name, template_path, info)


def create_example(info, language):
    print("Creating " + info["fullname"] + " for " + language)

    # Create language specific fields of info dict.
    info["language"] = language

    folder_name = language if language != "c#" else "cs"
    info["expath"] = path.join(info["repopath"], "examples", info["name"],
                               folder_name)

    # Create example directory if it does not exists
    if not path.exists(info["expath"]):
        makedirs(info["expath"])

    # Copy files
    copy_files(info)

    # Create README templates
    create_templates(info)

    # If we are not in windows, remove c# support (cannot run rtiddsgen).
    if language == "c#" and system() != "windows":
        return

    # Call rtiddsgen to generate files
    call_rtiddsgen(info)


if __name__ == "__main__":
    # Parse arguments
    parser = ArgumentParser(description='Create common files for examples.')
    parser.add_argument('name', help='Example short name. This is the name ' +
                        'of the folder that contains it.')
    parser.add_argument('fullname', help='Example long name. It is used ' +
                        'on the README templates.')
    parser.add_argument('arch', help='Architecture to compile example.')
    parser.add_argument('--language', help='Programming language. If the ' +
                        'argumment is ommited it will run for all languages ' +
                        'except C++11. Supported languages are: C, C++, ' +
                        'C++03, C++11, C# and Java. C# is only supported on ' +
                        'Windows.')
    parser.add_argument('--idlname', help='The name of the IDL file. ' +
                        'If ommited it will be the name of any *.idl to be ' +
                        'copied from "files" arguments. If there is no file,' +
                        ' the value will be the short name of the example.')
    parser.add_argument('files', help='Extra files to copy like IDL and ' +
                        'USER_QOS_PROFILES.xml. If there is no IDL to copy, '
                        'a Foo type will be created.',
                        nargs='*')
    args = parser.parse_args()

    # Create info dictionary with the argument info-
    info = {}
    info["name"] = args.name
    info["fullname"] = args.fullname
    info["files"] = args.files
    info["idlname"] = args.idlname
    info["arch"] = args.arch    # Used for rtiddsgen
    info["archwindows"] = "x64Win64VS2013"   # It works for all languages.
    info["archlinux"] = "x64Linux3gcc4.8.2"  # It works for all languages.
    info["scriptpath"] = path.dirname(path.realpath(__file__))
    info["repopath"] = path.join(info["scriptpath"], pardir, pardir)

    # If no language, do for all of them
    if args.language is None:
        languages = LANGUAGES
    else:
        languages = [args.language.lower()]

    # Create example for each language
    for lang in languages:
        create_example(info, lang)
